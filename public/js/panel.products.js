/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/panel.products.js":
/*!****************************************!*\
  !*** ./resources/js/panel.products.js ***!
  \****************************************/
/***/ (() => {

eval("document.addEventListener('DOMContentLoaded', function () {\n  var form = document.getElementById('add-product-form') ? document.getElementById('add-product-form') : document.getElementById('update-product-form');\n  var title = document.getElementById('title');\n  var alias = document.getElementById('alias');\n  var images = document.getElementById('images');\n  var show = document.getElementById('show');\n  var fields = document.querySelectorAll('input.form-control, input.form-control-file, textarea.form-control, select.form-control');\n  var clear = '.products__image-clear';\n  var arrImages = [];\n  form.addEventListener('submit', function (event) {\n    event.stopPropagation();\n    event.preventDefault();\n    clearErrors(fields);\n    var dataFields = document.querySelectorAll('.form-control');\n    var data = new FormData();\n\n    for (var i = 0; i < dataFields.length; i++) {\n      data.append(dataFields[i].name, dataFields[i].value);\n    }\n\n    for (var _i = 0; _i < arrImages.length; _i++) {\n      data.append('images[' + _i + ']', arrImages[_i]);\n    }\n\n    if (document.getElementById('update-product-form')) {\n      var oldImages = [];\n      var allOldImages = show.querySelectorAll('.products__images-item');\n\n      for (var _i2 = 0; _i2 < allOldImages.length; _i2++) {\n        if (allOldImages[_i2].dataset.id) oldImages.push(allOldImages[_i2].dataset.id); // Получаем все старые изображения\n      }\n\n      data.append('old_images', oldImages);\n      data.append('id', document.getElementById('product-id').value);\n    }\n\n    axios.post(form.action, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(function (response) {\n      if (response.data.errors) {\n        showErrors(response.data.errors);\n      } else {\n        if (response.data.success) setCookie('success', response.data.success);\n        window.location = response.data.route;\n      }\n    });\n  });\n  show.addEventListener('click', function (event) {\n    var closest = event.target.closest(clear);\n\n    if (closest && show.contains(closest)) {\n      var imageItem = closest.parentElement.parentElement;\n      var imageItemIndex = imageItem.dataset.index;\n      arrImages.splice(imageItemIndex, 1);\n      imageItem.remove();\n      var elems = show.querySelectorAll('.products__images-item');\n      var image_items = Array.from(elems).filter(function (el) {\n        return !el.dataset.id;\n      });\n\n      if (image_items.length) {\n        for (var i = 0; i < image_items.length; i++) {\n          image_items[i].dataset.index = i;\n        }\n      } else {\n        images.value = '';\n      }\n    }\n  });\n  title.addEventListener('input', function () {\n    axios.post(alias.dataset.action, {\n      str: title.value\n    }).then(function (response) {\n      if (response.data.alias) alias.value = response.data.alias;\n    });\n  });\n  images.addEventListener('change', function () {\n    clearImages();\n    if (checkErrors(this)) showImages(this);\n  });\n\n  function checkErrors(inputFiles) {\n    images.classList.remove('is-invalid');\n    var errorMessage = document.getElementById('image-error');\n    if (errorMessage) errorMessage.remove();\n    var items = inputFiles.files;\n    var maxSize = 1024 * 1024 * 2;\n    var errors = [];\n\n    if (items.length > 10) {\n      errors.push('Максимальное количество изображений 10 шт.');\n    }\n\n    for (var i = 0; i < items.length; i++) {\n      var size0 = items[i].size;\n\n      if (size0 > maxSize) {\n        errors.push('Максимальный размер загружаемого изображения 2 Mb.');\n      }\n\n      var type = items[i].type;\n\n      if (type === 'image/png' || type === 'image/bmp' || type === 'image/jpeg') {} else {\n        errors.push('Разрешены только изображения в формате png, bmp и jpeg.');\n      }\n    }\n\n    if (errors.length > 0) {\n      images.value = '';\n      images.classList.add('is-invalid');\n      images.insertAdjacentHTML('afterend', '<span id=\"image-error\" class=\"invalid-feedback\" role=\"alert\">\\n' + '<strong>' + errors[0] + '</strong>\\n' + '</span>');\n      return false;\n    }\n\n    return true;\n  }\n\n  function clearImages() {\n    var items = show.querySelectorAll('.products__images-item');\n\n    if (items.length) {\n      for (var i = 0; i < items.length; i++) {\n        if (!items[i].dataset.id) {\n          items[i].remove();\n        }\n      }\n    }\n  }\n\n  function showImages(inputFiles) {\n    var images = inputFiles.files;\n    arrImages = Array.from(images);\n\n    var _loop = function _loop(i) {\n      var reader = new FileReader(images[i]);\n\n      reader.onload = function (e) {\n        var card = document.createElement('div');\n        card.classList.add('products__images-item');\n        card.dataset.index = i;\n        card.innerHTML = '<div class=\"products__image\"><span class=\"products__image-clear\" title=\"Удалить\">×</span></div>';\n        card.querySelector('.products__image').style.backgroundImage = 'url(' + e.target.result + ')';\n        show.insertAdjacentElement('beforeend', card);\n      };\n\n      reader.readAsDataURL(images[i]);\n    };\n\n    for (var i = 0; i < images.length; i++) {\n      _loop(i);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/panel.products.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/panel.products.js"]();
/******/ 	
/******/ })()
;